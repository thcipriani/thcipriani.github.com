<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tyler Cipriani</title>
    <description>Gentleman, Scholar, Web Hacker</description>    
    <link>http://www.tylercipriani.com</link>
    <atom:link href="http://www.tylercipriani.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Toward a More Useful X Keyboard</title>
        <description>&lt;p&gt;I&#39;m not sure when, exactly, it became clear that I was going to spend as
much time as necessary perfecting my keyboard configuration. It&#39;s one of
those things that you &lt;em&gt;know&lt;/em&gt; you can make absolutely perfect—given enough
time and energy. On Linux, when you spend enough time bashing your brain
into a topic, you often find your effort rewarded manyfold. This is the
hallmark of a professional tool: a tool with which your efficiency
increases with your proficiency.&lt;/p&gt;

&lt;p&gt;The way many people first experience a computer is through a
point-and-click-style mouse interface. While there are
professional tools that prefer a &lt;a href=&quot;http://research.swtch.com/acme&quot;&gt;mouse interface&lt;/a&gt;,
and there is &lt;a href=&quot;http://www.loper-os.org/?p=861&quot;&gt;healthy&lt;/a&gt; &lt;a href=&quot;http://99percentinvisible.org/episode/of-mice-and-men/&quot;&gt;debate&lt;/a&gt;
about the most appropriate tool for computer interaction,
the fact remains: most professional computing and programming is
done with a QWERTY keyboard.&lt;/p&gt;

&lt;p&gt;My endless &lt;code&gt;X&lt;/code&gt; keyboard tinkerings have given me the most efficient
keyboard configuration I have ever used. This configuration is probably
achievable on other platforms; however, on a modern Linux system
my configuration only requires one tool that isn&#39;t included with the kernel:
&lt;a href=&quot;https://github.com/alols/xcape&quot;&gt;XCape&lt;/a&gt;, which is 500 lines of GPL-licensed
C-code—not too shabby overall.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#keymaps&quot;&gt;Keymaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autorepeat&quot;&gt;Key Autorepeat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#persist&quot;&gt;Persistence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div id=&quot;keymaps&quot;&gt;&lt;/div&gt;


&lt;h1&gt;Keymaps&lt;/h1&gt;

&lt;p&gt;To start working with keyboard layout the lowest-risk command is &lt;code&gt;setxkbmap(1)&lt;/code&gt;.
&lt;code&gt;setxkbmap&lt;/code&gt; temporarily maps the keyboard to use options specified on the command line.
Changes will not persist when you restart &lt;code&gt;X&lt;/code&gt; (i.e., log out and log back in).
This is a good place to start experimenting with configuration and layouts.&lt;/p&gt;

&lt;p&gt;The options that can be applied with &lt;code&gt;setxkbmap&lt;/code&gt; are found in
&lt;code&gt;xkeyboard-config(7)&lt;/code&gt;. For whatever reason, neither my Debian nor Arch box
has this man file. I found
&lt;a href=&quot;https://web.archive.org/web/20150125024107/http://www.dsm.fordham.edu/cgi-bin/man-cgi.pl?topic=xkeyboard-config&amp;amp;ampsect=7&quot;&gt;one copy&lt;/a&gt;
online and made sure to snapshot it in the
&lt;a href=&quot;https://web.archive.org&quot;&gt;internet archive&lt;/a&gt;—which is a project to which I plan to
donate more heavily in the upcoming year.&lt;/p&gt;

&lt;p&gt;To view currently applied options use: &lt;code&gt;setxkbmap -query&lt;/code&gt; which should
output something like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rules:      evdev
model:      pc105
layout:     us&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To achieve this with &lt;code&gt;setxkbmap&lt;/code&gt; you would type in your xterm:
&lt;code&gt;setxkbmap -model pc105 -layout us&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a pretty vanilla setup—when you setup your computer and accept
the defaults, this is what you get.&lt;/p&gt;

&lt;div id=&quot;altgr-intl&quot;&gt;&lt;/div&gt;


&lt;h2&gt;AltGr-Intl&lt;/h2&gt;

&lt;p&gt;One of the features I find myself using
frequently is the &lt;a href=&quot;https://en.wikipedia.org/wiki/AltGr_key&quot;&gt;AltGr&lt;/a&gt; (or &lt;em&gt;Alternate Graphic&lt;/em&gt;) key.
I like to be able to type international characters that are often used in
English (like &quot;é&quot;) without resorting to using deadkeys or
esoteric key-compostability sequences.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;é&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Right Alt&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; + &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;e&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;ñ&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Right Alt&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; + &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;ö&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Right Alt&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; + &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;p&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To enable this simply use the &lt;code&gt;setxkbmap&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;setxkbmap -model pc105 -layout us -variant altgr-intl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More information about the &lt;em&gt;AltGr-Intl&lt;/em&gt; layout can be found in the
&lt;a href=&quot;http://lists.x.org/archives/xorg/2007-July/026534.html&quot;&gt;Xorg Mailing List&lt;/a&gt;
(found via &lt;a href=&quot;https://zuttobenkyou.wordpress.com/2011/08/24/xorg-using-the-us-international-altgr-intl-variant-keyboard-layout/&quot;&gt;Shinobu&#39;s Secrets&lt;/a&gt;)&lt;/p&gt;

&lt;div id=&quot;xcompose&quot;&gt;&lt;/div&gt;


&lt;h2&gt;&lt;code&gt;~/.XCompose&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Text expansion is awesome. Being able to type a sequence of three characters
to dump your public key into IRC is awesome. Or how about &lt;code&gt;ಠ_ಠ&lt;/code&gt;? Being able
to express disapproval quickly is what separates our emails from those of
animals: it&#39;s why we have civilization.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Compose_key&quot;&gt;compose&lt;/a&gt; (or &lt;em&gt;MultiKey&lt;/em&gt;) key, can be mapped
to any number of keys or key combinations (again, see: &lt;a href=&quot;https://web.archive.org/web/20150125024107/http://www.dsm.fordham.edu/cgi-bin/man-cgi.pl?topic=xkeyboard-config&amp;amp;ampsect=7&quot;&gt;xkeyboard-config(7)&lt;/a&gt;)
I prefer to map my MultiKey to the right Ctrl key:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;setxkbmap -model pc105 -layout us -variant altgr-intl -option compose:rctrl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To type special symbols or expansions using the compose key, simply hit the
compose key (in my case right Ctrl) and then type the additional character for the
combination in sequence.&lt;/p&gt;

&lt;p&gt;For instance, to make a degree mark (&quot;°&quot;) I type: &lt;code&gt;[Ctrl]-o-o&lt;/code&gt;; just like I&#39;m
typing &quot;oo&quot;, but I hit the right Ctrl key first.&lt;/p&gt;

&lt;p&gt;The real magic of the compose key can be unleashed with the &lt;code&gt;~/.XCompose&lt;/code&gt; file.
This is the file into which you can drop your custom key combination mappings
that will generate any text output.&lt;/p&gt;

&lt;p&gt;Example expansions for &lt;a href=&quot;https://github.com/thcipriani/dotfiles/blob/master/XCompose&quot;&gt;&lt;code&gt;~/.XCompose&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Quick ssh key output&lt;/span&gt;
&amp;lt;Multi_key&amp;gt; &amp;lt;k&amp;gt; &amp;lt;e&amp;gt; &amp;lt;y&amp;gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://gist.github.com/thcipriani/5e95399457da6544a4cb&amp;quot;&lt;/span&gt;

&amp;lt;Multi_key&amp;gt; &amp;lt;S&amp;gt; &amp;lt;N&amp;gt; &amp;lt;O&amp;gt; &amp;lt;W&amp;gt;     : &lt;span class=&quot;s2&quot;&gt;&amp;quot;❄&amp;quot;&lt;/span&gt;   U2603
&amp;lt;Multi_key&amp;gt; &amp;lt;p&amp;gt; &amp;lt;l&amp;gt; &amp;lt;a&amp;gt; &amp;lt;n&amp;gt; &amp;lt;e&amp;gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;✈&amp;quot;&lt;/span&gt;   U2708
&amp;lt;Multi_key&amp;gt; &amp;lt;z&amp;gt; &amp;lt;a&amp;gt; &amp;lt;p&amp;gt;         : &lt;span class=&quot;s2&quot;&gt;&amp;quot;⚡&amp;quot;&lt;/span&gt;   U26A1

&lt;span class=&quot;c&quot;&gt;# prefix &amp;#39;m&amp;#39; = mathematical symbols&lt;/span&gt;
&amp;lt;Multi_key&amp;gt; &amp;lt;m&amp;gt; &amp;lt;d&amp;gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;Δ&amp;quot;&lt;/span&gt;
&amp;lt;Multi_key&amp;gt; &amp;lt;m&amp;gt; &amp;lt;e&amp;gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;ϵ&amp;quot;&lt;/span&gt;
&amp;lt;Multi_key&amp;gt; &amp;lt;m&amp;gt; &amp;lt;l&amp;gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;λ&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# misc&lt;/span&gt;
&amp;lt;Multi_key&amp;gt; &amp;lt;colon&amp;gt; &amp;lt;bar&amp;gt; &amp;lt;bar&amp;gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;ಠ_ಠ&amp;quot;&lt;/span&gt;
&amp;lt;Multi_key&amp;gt; &amp;lt;less&amp;gt; &amp;lt;3&amp;gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;❤&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div id=&quot;capslock&quot;&gt;&lt;/div&gt;


&lt;h2&gt;You&#39;re out of your element, CapsLock&lt;/h2&gt;

&lt;p&gt;CapsLock sucks and everyone hates it.&lt;/p&gt;

&lt;p&gt;People &lt;em&gt;think&lt;/em&gt; they use CapsLock, but, &lt;em&gt;I&lt;/em&gt; think, if people were honest with
themselves they would admit that CapsLock is the worse than useless: it&#39;s
usually counter-productive. Also, if you find yourself frequently needing
to type in ALL CAPS, maybe you should look at life:
&lt;em&gt;what have you become&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;I like to remap my CapsLock key to a modifier key I use more frequently: Ctrl.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;setxkbmap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -model pc105 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -layout us &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -variant altgr-intl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option compose:rctrl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option ctrl:nocaps&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div id=&quot;xcape&quot;&gt;&lt;/div&gt;


&lt;h2&gt;XCape&lt;/h2&gt;

&lt;p&gt;The other function of my CapsLock key only happens when it is pressed without
any additonal keys. Basically, if I hit &lt;code&gt;CapsLock+[t]&lt;/code&gt;, I want a new tab,
but if I just hit &lt;code&gt;CapsLock&lt;/code&gt;, it doesn&#39;t do anything—which &lt;em&gt;was&lt;/em&gt; a waste.&lt;/p&gt;

&lt;p&gt;The program &lt;a href=&quot;https://github.com/alols/xcape&quot;&gt;XCape&lt;/a&gt; allows you to configure
modifier keys (Alt, Ctrl, Shift, Meta) to act as other keys when pressed
on their own. And, since the CapsLock key is so central on my keyboard, I
also use it as an escape key. Compiling &lt;code&gt;xcape&lt;/code&gt; is pretty straight forward
(provided you have the requisite build tools):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/alols/xcape.git .
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xcape &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command that allows for that functionality is also pretty straight-forward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xcape -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;Control_L=Escape&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I also use the option that allows &lt;code&gt;[Ctrl]+[Alt]+[Backspace]&lt;/code&gt; to
end an &lt;code&gt;X&lt;/code&gt; session. So my final &lt;code&gt;setxkbmap&lt;/code&gt; looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;setxkbmap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -model pc105 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -layout us &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -variant altgr-intl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option compose:rctrl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option ctrl:nocaps &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option terminate:ctrl_alt_bksp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div id=&quot;autorepeat&quot;&gt;&lt;/div&gt;


&lt;h1&gt;Key Autorepeat&lt;/h1&gt;

&lt;p&gt;There are some keyboard options that cannot be set via &lt;code&gt;setxkbmap&lt;/code&gt;. The
&lt;code&gt;AutoRepeat&lt;/code&gt; option was removed from the &lt;code&gt;X&lt;/code&gt; keyboard driver (&lt;code&gt;kbd(4)&lt;/code&gt;) as
of &lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=601853&quot;&gt;version 1.4.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only recourse is using &lt;code&gt;xset(1)&lt;/code&gt;, the &lt;code&gt;X&lt;/code&gt; user-preference utility. An infinitely
customizable keyrate is one of the many luxuries of using a Linux keyboard.&lt;/p&gt;

&lt;p&gt;There are two main options that matter for me in &lt;code&gt;xset&lt;/code&gt; that affect the
autorepeat rate: AutoRepeatDelay and AutoRepeatRate&lt;/p&gt;

&lt;p&gt;The syntax for &lt;code&gt;xset&lt;/code&gt; autorepeat is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xset &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-r keycode&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; rate &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AutoRepeatRate&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AutoRepeatDelay&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By omitting the &lt;code&gt;-r keycode&lt;/code&gt; you apply the &lt;code&gt;rate&lt;/code&gt; to all keys (e.g.,
&lt;code&gt;xset -r 10&lt;/code&gt; will apply the &lt;code&gt;rate&lt;/code&gt; settings only to the &quot;1&quot; key). The
default AutoRepeatDelay is 660ms and the default AutoRepeatRate is 25Hz,
which is fine, but after tweaking this rate and living with it for a few
days it will seem &lt;em&gt;unbearably slow&lt;/em&gt;. My settings are:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xset r rate &lt;span class=&quot;m&quot;&gt;330&lt;/span&gt; 75&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These settings half the time I spend waiting for a key to auto-repeat, and
triple the rate at which that auto-repeat fires.&lt;/p&gt;

&lt;p&gt;While mentioning &lt;code&gt;xset&lt;/code&gt; it&#39;s also worth mentioning that I hate HATE the system beep.
It&#39;s that beep that happens when you double-tab Tab in Bash, or try to
backspace beyond the beginning of a line (which happens a lot with a fast
AutoRepeatRate). You can probably disable it many ways in &lt;code&gt;X&lt;/code&gt;, but I use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xset -b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div id=&quot;persist&quot;&gt;&lt;/div&gt;


&lt;h1&gt;Persistence&lt;/h1&gt;

&lt;p&gt;By placing the &lt;code&gt;setxkbmap&lt;/code&gt; command, the &lt;code&gt;xcape&lt;/code&gt; command, and the two &lt;code&gt;xset&lt;/code&gt;
commands shown above into &lt;code&gt;~/.xinitrc&lt;/code&gt;, that configuration will load
whenever &lt;code&gt;X&lt;/code&gt; is started.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ~/.xinitrc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
has?&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Keyboard stuffs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# * use right-alt as Alt-Gr key ($ → £)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# * use right ctrl key as compose (ctrl 1 2 → ½)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# * use ctrl+alt+bksp to restart `X`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# * Capslock → Ctrl&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# * Alt-Gr + Space = nbsp/Alt-Gr + Shift + Space = shy nbsp&lt;/span&gt;
setxkbmap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -layout us &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -variant altgr-intl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option compose:rctrl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option terminate:ctrl_alt_bksp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -option ctrl:nocaps

xset -b            &lt;span class=&quot;c&quot;&gt;# Stop beeping at me (A.K.A turn off PC speaker)&lt;/span&gt;
xset r rate &lt;span class=&quot;m&quot;&gt;330&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Set keyboard repeat rate&lt;/span&gt;

has? xcape &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; xcape -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;Control_L=Escape&amp;#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# https://github.com/alols/xcape&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;~/.xinitrc&lt;/code&gt; will NOT, however, keep those configurations when an external
USB keyboard is added to the mix.&lt;/p&gt;

&lt;p&gt;The configuration loaded by &lt;code&gt;setxkbmap&lt;/code&gt; can easily become persistent
since it is part of the &lt;code&gt;X&lt;/code&gt; keyboard driver. I have the following in a
file at &lt;code&gt;/etc/X11/xorg.conf.d/10-keyboard.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Section &lt;span class=&quot;s2&quot;&gt;&amp;quot;InputDevice&amp;quot;&lt;/span&gt;
  Identifier &lt;span class=&quot;s2&quot;&gt;&amp;quot;Muh Keyboard&amp;quot;&lt;/span&gt;
  MatchIsKeyboard &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
  Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;xkblayout&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;us&amp;quot;&lt;/span&gt;
  Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;xkbvariant&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;altgr-intl&amp;quot;&lt;/span&gt;
  Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;Xkboptions&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;compose:rctrl&amp;quot;&lt;/span&gt;
  Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;Xkboptions&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;terminate:ctrl_alt_bksp&amp;quot;&lt;/span&gt;
  Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;Xkboptions&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl:nocaps&amp;quot;&lt;/span&gt;
EndSection&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;xset&lt;/code&gt; commands and &lt;code&gt;xcape&lt;/code&gt; daemon are a bit more difficult to persist
when attaching external keyboards.&lt;/p&gt;

&lt;p&gt;In the lazy past, I created a file in my &lt;code&gt;~/bin/&lt;/code&gt; directory
(which, in my case, is on my &lt;code&gt;$PATH&lt;/code&gt;) that I ran manually whenever a new
keyboard was attached.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ~/bin/keyboard—In case of new keyboard, break gla...er...I mean...run this.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  sleep 1

  &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:0.0 xset -b
  &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:0.0 xset r rate &lt;span class=&quot;m&quot;&gt;330&lt;/span&gt; 60
  xcape -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;Control_L=Escape&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:0.0 notify-send &lt;span class=&quot;s2&quot;&gt;&amp;quot;External USB Connected&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Getting over to my terminal and typing: &lt;code&gt;keyboard&lt;/code&gt; everytime I attached a
new keyboard is pretty far from &lt;em&gt;perfect&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what are my other options? Initially, I thought about doing something with
&lt;code&gt;acpid(8)&lt;/code&gt; (&lt;a href=&quot;https://github.com/thcipriani/acpi&quot;&gt;since I use that a ton&lt;/a&gt;), which would have been easy
enough. &lt;code&gt;acpid&lt;/code&gt; notifies user-space utilities about system events, which
includes when devices are attached.&lt;/p&gt;

&lt;p&gt;After reading a great post from &lt;a href=&quot;http://pbrisbin.com/posts/disable_all_the_caps/&quot;&gt;Pat Brisbin&lt;/a&gt;
about udev events, I thought (and think) that&#39;s the answer. You can probably
tell that my &lt;code&gt;~/bin/keyboard&lt;/code&gt; script has evolved to accommodate what he outlined
in his article. In any event (pun intended), I created a file at &lt;code&gt;/etc/udev/rules.d/99-usb-keyboards.rules&lt;/code&gt;
with the following contents:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, RUN+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/su tyler --shell=/bin/bash -c /home/tyler/bin/keyboard&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which seems to do the trick!&lt;/p&gt;

&lt;p&gt;The configuration you see above is the result of &lt;em&gt;way too much&lt;/em&gt; thinking
about how I use my keyboard. Now, I just need to get this configuration to
work &lt;em&gt;without&lt;/em&gt; &lt;code&gt;X&lt;/code&gt; Server...&lt;em&gt;le sigh&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Jan 2015 00:00:00 -0700</pubDate>
        <link>http://www.tylercipriani.com/2015/01/23/toward-a-useful-keyboard-in-x.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2015/01/23/toward-a-useful-keyboard-in-x.html</guid>
      </item>
    
      <item>
        <title>Conway&amp;#8217;s Favicon</title>
        <description>&lt;p&gt;I find favicons pretty useful overall. That weird little
&lt;a href=&quot;https://bugs.r-project.org/bugzilla3/images/favicon.ico&quot;&gt;Earthworm-Jim-esque bug-head&lt;/a&gt;
in my bookmarks bar immediately queues me in on where to click to get to
bugzilla. My site hasn&amp;#8217;t had a favicon. The only explanation I can offer is
laziness mixed with a lack of inspiration. A favicon isn&amp;#8217;t typically a
glamorous undertaking—it&amp;#8217;s just one of those things that ought to be done.&lt;/p&gt;

&lt;p&gt;My first idea for a favicon was Eric S. Raymond&amp;#8217;s
&lt;a href=&quot;http://www.catb.org/hacker-emblem/&quot;&gt;Hacker Emblem&lt;/a&gt;. The Hacker Emblem
is certainly a meaningful symbol, but it&amp;#8217;s also kind of a cop-out.&lt;/p&gt;

&lt;p&gt;I tried something with &lt;a href=&quot;/images/nyan-conway.png&quot;&gt;nyan cat and the hacker emblem&lt;/a&gt;,
which was a solid idea, but sort of lost something at 16px×16px. Then I
started to think, &lt;em&gt;why not just have Conway&amp;#8217;s Game of Life running in the
favicon&lt;/em&gt;?&lt;/p&gt;

&lt;h2&gt;Game of Life in JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;
is a zero player game with 4 simple rules (this is verbatim from the Wikipedia article):&lt;/p&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;Any live cell with less than two live neighbours dies, as if caused by under-population.&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbours lives on to the next generation.&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbours dies, as if by overcrowding.&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/thcipriani/conways-favicon/blob/master/conways-favicon.js&quot;&gt;My game of life&lt;/a&gt;
is heavily derived from an IBM DeveloperWorks post,
&lt;a href=&quot;http://www.ibm.com/developerworks/library/wa-coffeescriptcanvas/&quot;&gt;&lt;em&gt;Conway&amp;#8217;s Game of Life in CoffeeScript and canvas&lt;/em&gt;&lt;/a&gt;,
except that I just used plain ol&amp;#8217; JavaScript, a much smaller grid, and
I included some functionality to reset the game seed if the last two
evolutions of life don&amp;#8217;t change the grid layout.&lt;/p&gt;

&lt;h2&gt;Dynamic Favicons&lt;/h2&gt;

&lt;p&gt;After creating the game loop in JavaScript, I had to create some code to
dynamically update the favicon.&lt;/p&gt;

&lt;p&gt;First, I created the &lt;a href=&quot;/favicon.ico&quot;&gt;default favicon&lt;/a&gt; for this site by
rendering out a glider via JavaScript and rendering the canvas as a png
on the page.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;GameOfLife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;glider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Seed with default of glider&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GameOfLife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rowLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gliderLen&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Start with all empty&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rowLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numberOfRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rowLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curCellGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numberOfCols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curCellGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Create glider&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gliderLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;glider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gliderLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;glider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;glider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curCellGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;GameOfLife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawGrid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDataURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img/png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After rendering as a png in the browser, I saved the &lt;code&gt;.png&lt;/code&gt; to my computer.
Then I uploaded the png to &lt;a href=&quot;http://favicon-generator.org/&quot;&gt;favicon-generator.org&lt;/a&gt;
saving the resulting &lt;code&gt;.ico&lt;/code&gt; to my site&amp;#8217;s directory root as &lt;code&gt;favicon.ico&lt;/code&gt;.
&lt;code&gt;favicon.ico&lt;/code&gt; is what gets rendered in IE, since IE has found brand new ways
to be non-compliant with emerging standards (le sigh).&lt;/p&gt;

&lt;p&gt;The finishing touch is to make the &lt;code&gt;GameOfLife.prototype.drawGrid&lt;/code&gt; function update
my favicon&amp;#8217;s &lt;code&gt;href&lt;/code&gt; attribute on every &lt;code&gt;tick&lt;/code&gt; function call:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;GameOfLife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCanvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;favicon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;favicon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;icon&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;GameOfLife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawGrid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;favicon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDataURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img/png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The entirety of this javascript is available under the
 &lt;a href=&quot;https://tldrlegal.com/license/gnu-general-public-license-v3-%28gpl-3%29&quot;&gt;GPLv3 License&lt;/a&gt;
on &lt;a href=&quot;https://github.com/thcipriani/conways-favicon&quot;&gt;my github&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Nov 2014 00:00:00 -0700</pubDate>
        <link>http://www.tylercipriani.com/2014/11/30/conways-game-of-life-favicon.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2014/11/30/conways-game-of-life-favicon.html</guid>
      </item>
    
      <item>
        <title>Cross-Browser JavaScript Scrollbar Detection</title>
        <description>&lt;p&gt;I recently contributed a fix to the
&lt;a href=&quot;https://github.com/twbs/bootstrap/issues/9855&quot;&gt;bootstrap framework&lt;/a&gt;
that detects on-screen scrollbars to determine whether or not the body
should be padded when a modal window is opened to prevent shifting of
background contents. Detecting on-screen scrollbars turned out to be a bit
more involved than I initially anticipated.&lt;/p&gt;

&lt;p&gt;The tl;dr, semi-näive version:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasScrollbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientWidth&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works for most browsers. Basically it checks to see if the width of
the &lt;code&gt;window&lt;/code&gt; element (read: including scrollbars) is greater than the width
 of the root element of the page (read: without scrollbars). If the width
of the page with scrollbars is greater than the width of a page without
scrollbars it would stand to reason that the extra width &lt;em&gt;is&lt;/em&gt; a scrollbar.&lt;/p&gt;

&lt;p&gt;This solution behaves correctly when IE10+ has
&lt;code&gt;@-ms-viewport { width: device-width; }&lt;/code&gt; set (as it is in the bootstrap
framework), which seems to result in scrollbars being auto-hidden.
This solution also works for Chrome on the Mac where the scrollbars
are automagically hidden.&lt;/p&gt;

&lt;p&gt;This certainly seems to function as expected for IE9+; however,
&lt;a href=&quot;http://www.paulirish.com/2011/browser-market-pollution-iex-is-the-new-ie6/&quot;&gt;IE8 is our newest anchor browser&lt;/a&gt;
so IE8 should be addressed in any ostensibly &amp;#8220;cross-browser&amp;#8221; approaches.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window.innerWidth&lt;/code&gt; doesn&amp;#8217;t exist on IE8. Any workarounds you see utilizing
&lt;code&gt;document.documentElement&lt;/code&gt; will not include scrollbars in the reported
width, so &lt;code&gt;document.docutmentElement&lt;/code&gt; will not be an adequate substitute
in &amp;lt; IE9.&lt;/p&gt;

&lt;p&gt;One thing to check is the &lt;code&gt;scrollHeight&lt;/code&gt;. If the &lt;code&gt;scrollHeight&lt;/code&gt; of the root
element is greater than the &lt;code&gt;clientHeight&lt;/code&gt; of the root element, then that
root element is going to need to scroll to show the overflowing content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasScrollbar&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hasScrollbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientWidth&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;hasScrollbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasScrollbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientHeight&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, this is an oversimplification. The &lt;code&gt;overflow&lt;/code&gt; property of the root
element can modify the appearance of scrollbars (to create on-screen &lt;em&gt;faux&lt;/em&gt; llbars).
Of course, once again, IE and modern browsers differ about how they&amp;#8217;ve
implemented the javascript api for accessing element styles. We can account
for this difference and grab the overflow property like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflow&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two values of the &lt;code&gt;overflow&lt;/code&gt; or &lt;code&gt;overflow-y&lt;/code&gt; properties that will
create scrollbars are &lt;code&gt;visible&lt;/code&gt; and &lt;code&gt;auto&lt;/code&gt; provided that the &lt;code&gt;scrollHeight&lt;/code&gt;
is greater than the &lt;code&gt;clientHeight&lt;/code&gt;. A value of &lt;code&gt;scroll&lt;/code&gt; for the &lt;code&gt;overflow&lt;/code&gt;
or &lt;code&gt;overflow-y&lt;/code&gt; properties will always cause a scrollbar.&lt;/p&gt;

&lt;p&gt;This is, once again, a bit of a simplification.&lt;/p&gt;

&lt;p&gt;In quirksmode in IE8 &lt;code&gt;document.documentElement.clientHeight&lt;/code&gt; is 0. The root
element is &lt;code&gt;document.body&lt;/code&gt;. This won&amp;#8217;t affect most people reading this, but
just to be on the safe side let&amp;#8217;s add it into our solution.&lt;/p&gt;

&lt;p&gt;The final solution looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasScrollbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The Modern solution&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientWidth&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// rootElem for quirksmode&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Check overflow style property on body for fauxscrollbars&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflow&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflow&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Also need to check the Y axis overflow&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowYStyle&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;overflowYStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflowY&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;overflowYStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowYStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflowY&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentOverflows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientHeight&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowShown&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^(visible|auto)$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^(visible|auto)$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overflowYStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alwaysShowScroll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;scroll&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowYStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;scroll&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentOverflows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;overflowShown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alwaysShowScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If I missed something, or if &lt;em&gt;this&lt;/em&gt; solution is a bit of an oversimplification
(le sigh), please let me know in the comments.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jul 2014 00:00:00 -0600</pubDate>
        <link>http://www.tylercipriani.com/2014/07/12/crossbrowser-javascript-scrollbar-detection.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2014/07/12/crossbrowser-javascript-scrollbar-detection.html</guid>
      </item>
    
      <item>
        <title>Development Environments with Vagrant, Docker, and Supervisord</title>
        <description>&lt;p&gt;I&amp;#8217;ve used Vagrant a fair amount in my day, and it&amp;#8217;s great. I
enjoy being able to spin-up toy linux environments to test out ideas.
I tend to use the &lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/chef_solo.html&quot;&gt;Chef provisioner&lt;/a&gt; with Vagrant
to build-out a local environment that matches my server fairly closely.&lt;/p&gt;

&lt;h2&gt;My Ever-Evolving Rant About DevOps&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve been thinking about Chef a lot lately. Often is the time, in moments of
profound frustration, that I&amp;#8217;ve
had the thought that Chef is nothing more than a useless, leaky abstraction that separates me
from something I know fairly well&amp;#8212;Linux.&lt;/p&gt;

&lt;p&gt;This thought is usually fleeting: Chef provides many needed abstractions that
are, ultimately, much easier to grok than the underlying Linux system. Further,
Chef allows you to keep a(n ostensibly) well-tested system under version control.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve come to the realization that my problem with Chef is not really a problem
with Chef, but a &lt;a href=&quot;https://www.domenkozar.com/2014/03/11/why-puppet-chef-ansible-arent-good-enough-and-we-can-do-better/&quot;&gt;problem with Linux itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Linux system administration is difficult because Linux
commands are non-deterministic and rely heavily on system
state (e.g., installed software, permissions, network settings and availability).
Maintaining a bare-metal, long-running server non-interactively using Chef
sucks because &lt;a href=&quot;http://me.andering.com/2011/02/03/server-login-considered-harmful/&quot;&gt;any hand-tinkering via ssh&lt;/a&gt; is going to fuck with the &amp;#8220;state&amp;#8221; of
the system&amp;#8212;creating different results for subsequent chef-client runs.
This system state adjustment may or may not be reflected in the chef repository (which
double sucks).&lt;/p&gt;

&lt;h2&gt;Why Docker Curtails My Rage&lt;/h2&gt;

&lt;p&gt;I started to think about Docker. I feel Docker addresses
the problem of program state better than other currently available solutions
(although, &lt;a href=&quot;https://nixos.org/nixos/&quot;&gt;Nix&lt;/a&gt; is looking pretty promising as well). While Docker is
still a Linux system&amp;#8212;and, ipso facto, state-dependant&amp;#8212;it&amp;#8217;s also
ephemeral and therefore, by not persisting changes to state, Docker has
created a previously unavailable (on bare metal hardware), lightweight
workaround to the problem of system state.&lt;/p&gt;

&lt;p&gt;As is my wont, I decided today to play a bit with Docker on Vagrant and, lo-and-below,
I found that the newest version of Vagrant (1.6.2, as of May 26th) can actually use &lt;a href=&quot;https://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker as a &lt;em&gt;provider&lt;/em&gt;&lt;/a&gt;,
that is, as an alternative to VirtualBox. Using Docker as a provider means
that you can run a fully-independent development enviroment, on your host
machine without the overhead of VirtualBox. Neat.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Imma setup a local development environment for Ubuntu 14.04, nginx and php-fpm
using Vagrant, Supervisord and Docker,&amp;#8221; says I.&lt;/p&gt;

&lt;h2&gt;Project Layout&lt;/h2&gt;

&lt;p&gt;To keep my project directory nice and tidy, I&amp;#8217;ve separated-out most of the
files needed by the Docker provider into a &lt;code&gt;Docker&lt;/code&gt; folder. This
results in the directory structure below.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;├── Docker
│   ├── Dockerfile
│   ├── nginx
│   │   └── default
│   ├── php-fpm
│   │   └── php-fpm.conf
│   └── supervisor
│       └── supervisord.conf
├── Vagrantfile
└── www
    └── index.php&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; is used to build the main docker machine and the subfolders
in the &lt;code&gt;Docker&lt;/code&gt; directory contain configuration used in the &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;www&lt;/code&gt; folder is my fake php project folder.&lt;/p&gt;

&lt;h2&gt;VagrantFile&lt;/h2&gt;

&lt;p&gt;Since docker handles so much of what was previously handled by Vagrant provisioner,
the &lt;code&gt;Vagrantfile&lt;/code&gt; for a Docker-backed Vagrant instance is pretty sparse.&lt;/p&gt;

&lt;p&gt;In mine, I&amp;#8217;ve got:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./www&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/var/www&amp;quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Sync&amp;#39;d folder&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./Docker&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# specifies the path to the Dockerfile&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;8080:80&amp;#39;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Forwards port 8080 from the host to the Docker Container port 80&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;Most of the work of provisioning a container is handled by Docker and
the Dockerfile. In fact, if you were only ever going to run this container on a Linux machine, I
don&amp;#8217;t think that Vagrant adds any needed functionality to the &lt;code&gt;docker.io&lt;/code&gt; cli.
In terms of portability, however, Vagrant is, at this time, a necessary evil
to run docker on OSX and Windows.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:latest

MAINTAINER Tyler Cipriani, tyler@tylercipriani.com

&lt;span class=&quot;c&quot;&gt;# Download and install php, nginx, and supervisor, hey, just linux for a change!&lt;/span&gt;
RUN apt-get update
RUN apt-get install -y software-properties-common
RUN add-apt-repository ppa:nginx/stable
RUN apt-get update
RUN apt-get -y dist-upgrade
RUN apt-get install -y php5-fpm nginx supervisor

&lt;span class=&quot;c&quot;&gt;# Setup config files&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/nginx/nginx.conf
ADD ./nginx/default /etc/nginx/sites-enabled/default
ADD ./supervisor/supervisord.conf /etc/supervisor/supervisord.conf
ADD ./php-fpm/php-fpm.conf /etc/php5/fpm/php-fpm.conf

&lt;span class=&quot;c&quot;&gt;# Shared volume&lt;/span&gt;
RUN mkdir -p /var/www
VOLUME &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/var/www&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Default command for container, start supervisor&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;supervisord&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;--nodaemon&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
USER root

&lt;span class=&quot;c&quot;&gt;# Expose port 80 of the container&lt;/span&gt;
EXPOSE 80&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; takes care of building a docker container from the latest
Ubuntu image (14.04 as of May 26th, 2014). Running this code installs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nginx 1.6.0&lt;/li&gt;
&lt;li&gt;PHP 5.5.9&lt;/li&gt;
&lt;li&gt;Supervisor&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This config also starts supervisor with the &lt;code&gt;--nodaemon&lt;/code&gt; flag by default.
Docker can run a container running a non-daemonized program as a daemon
(much like supervisor can run non-daemonized programs as daemons).
Supervisor is used as a way of running both nginx and php-fpm as non-daemonized
programs. It is also noteworthy that the dockerfile creates and/or modifies configuration files for php-fpm and nginx
to make sure they both run in non-daemon mode.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nginx/default&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;/var/www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# pass the PHP scripts to FastCGI server&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;\.php$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^(.+\.php)(/.+)&lt;/span&gt;$&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unix:/var/run/php5-fpm.sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastcgi_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;php-fpm/php-fpm.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[global]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/php5-fpm.pid&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;error_log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/log/php5-fpm.log&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;daemonize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/php5/fpm/pool.d/*.conf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;supervisor/supervisord.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[unix_http_server]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/run/supervisor.sock   ; (the path to the socket file)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;chmod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0700                       ; sockef file mode (default 0700)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[supervisord]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;logfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;logfile_maxbytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;50MB        ; (max main logfile bytes b4 rotation;default 50MB)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;logfile_backups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10           ; (num of main logfile rotation backups;default 10)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;info                ; (log level;default info; others: debug,warn,trace)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;pidfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;nodaemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;false               ; (start in foreground if true;default false)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;minfds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1024                  ; (min. avail startup file descriptors;default 1024)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;minprocs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200                 ; (min. avail process descriptors;default 200)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; the below section must remain in the config file for RPC&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; (supervisorctl/web interface) to work, additional interfaces may be&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; added by defining them in separate rpcinterface: sections&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;[rpcinterface:supervisor]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;supervisor.rpcinterface_factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;supervisor.rpcinterface:make_main_rpcinterface&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[supervisorctl]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;serverurl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[program:php5-fpm]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/sbin/php5-fpm -c /etc/php5/fpm&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;stdout_events_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;stderr_events_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[program:nginx]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/sbin/nginx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;stdout_events_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;stderr_events_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Jam Time&lt;/h2&gt;

&lt;p&gt;With all of our configuration in place there isn&amp;#8217;t much left to do aside
from running the vagrant instance and allowing docker to create our container.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo docker pull ubuntu &lt;span class=&quot;c&quot;&gt;# to grab the latest Ubuntu image, Vagrant should probably do this but doesn&amp;#39;t&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo vagrant up --provider&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker --debug &lt;span class=&quot;c&quot;&gt;# use debug if you don&amp;#39;t want to sit waiting with no info for a long time on the first run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that, you now have a container running nginx and php-fpm that is sharing
a folder with you at &lt;code&gt;/var/www&lt;/code&gt;. Navigating to &lt;code&gt;http://localhost:8080/index.php&lt;/code&gt;
should show you the contents of your &lt;code&gt;./www/index.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This process is really simple AND super lightweight. I&amp;#8217;ve been running my
docker/vagrant instance for about 45 minutes alongside chrome and tmux/xterm
without any noticeable jankyness on a notoriously janky laptop.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 May 2014 00:00:00 -0600</pubDate>
        <link>http://www.tylercipriani.com/2014/05/25/lightweight-portable-vagrant-docker.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2014/05/25/lightweight-portable-vagrant-docker.html</guid>
      </item>
    
      <item>
        <title>Create a Baller/Useful MOTD with ANSI Art</title>
        <description>&lt;p&gt;Everyone universally agrees that most &lt;a href=&quot;http://linux.die.net/man/5/motd&quot;&gt;Message of the Days (MOTDs)&lt;/a&gt;
are stupid and suck. By the end of reading this post, your mind grapes should be swollen with the knowledge
of how to make an MOTD that isn&amp;#8217;t stupid and, some would say, &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt;
suck.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Imagemagick&lt;/li&gt;
&lt;li&gt;OpenJDK&lt;/li&gt;
&lt;li&gt;coreutils&lt;/li&gt;
&lt;li&gt;perl&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This should have you covered:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install imagemagick openjdk-6-jdk coreutils perl git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creating the Util-say file&lt;/h2&gt;

&lt;p&gt;I use &lt;a href=&quot;https://github.com/maandree/util-say&quot;&gt;Util-Say&lt;/a&gt; to create motd messages.
I started out using &lt;a href=&quot;https://github.com/rossy2401/img2xterm&quot;&gt;img2xterm&lt;/a&gt;,
but I&amp;#8217;ve found I get better results with Util-Say.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/maandree/util-say
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;util-say
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./img2ponysay -- yourimg.png &amp;gt; yourimg.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also try &lt;code&gt;./img2ponysay -2 -- youimg.png &amp;gt; yourimg.txt&lt;/code&gt; but I&amp;#8217;ve never had good results with that&lt;/p&gt;

&lt;h2&gt;MOTD-ifying&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://tylercipriani-files.s3.amazonaws.com/mammoth_motd.png&quot; alt=&quot;Mammoth Motd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On CentOS and Debian, I usually just throw the ponysay file directly into &lt;code&gt;/etc/motd&lt;/code&gt; and maybe add on some other useful info:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo cat yourimg.txt &amp;gt; /etc/motd
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo figlet &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(hostname)&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/motd
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Public IP: $(dig +short myip.opendns.com @resolver1.opendns.com)\n&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/motd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On Ubuntu Boxes (since they use &lt;a href=&quot;https://wiki.ubuntu.com/UpdateMotd&quot;&gt;update-motd(1)&lt;/a&gt;),
I do pretty much the same thing except I just make a bash
script in &lt;code&gt;/etc/update-motd.d/25-baller-motd&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
cat yourimg.txt
figlet &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(hostname)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Public IP: $(dig +short myip.opendns.com @resolver1.opendns.com)\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -v fortune &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; fortune&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are likely better articles on creating a &lt;em&gt;useful&lt;/em&gt; MOTD,
(&lt;a href=&quot;http://www.mewbies.com/how_to_customize_your_console_login_message_tutorial.htm&quot;&gt;here&lt;/a&gt;&amp;#8217;s
one that looks kinda cool) but there are exactly none-better articles on
creating MOTDs that are so flossy!&lt;/p&gt;
</description>
        <pubDate>Thu, 22 May 2014 00:00:00 -0600</pubDate>
        <link>http://www.tylercipriani.com/2014/05/22/creating-baller-useful-motd-ascii-art.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2014/05/22/creating-baller-useful-motd-ascii-art.html</guid>
      </item>
    
      <item>
        <title>Replacing Jekyll with Pandoc and a Makefile</title>
        <description>&lt;p&gt;I used to use del.icio.us to keep track of links, then it went away.
After del.icio.us shutdown, I used a ton of uniquely awful services to
keep track of links. Eventually, I came around to the idea that all I
needed was a series of markdown files and github: &lt;a href=&quot;https://github.com/thcipriani/links/tree/8d2442d4ba8a9090f645dd2cfe73216a7350dea5&quot;&gt;BOOM!&lt;/a&gt;
Public link repositiory&amp;#8212;just like del.icio.us back in the day.&lt;/p&gt;

&lt;p&gt;After a while I started thinking, I could make these files a lot more
presentable if I did some jekyll-ifying and served them out on github.&lt;/p&gt;

&lt;h2&gt;Previously Jekyllfied&lt;/h2&gt;

&lt;p&gt;My &lt;code&gt;linuxtips&lt;/code&gt; repo is just a dumb jekyll repo. Esentially all &lt;code&gt;linuxtips&lt;/code&gt; is is
just &lt;a href=&quot;https://github.com/thcipriani/linuxtips/blob/master/README.md&quot;&gt;a big &lt;code&gt;README&lt;/code&gt; file&lt;/a&gt;.
So, for that repo, I created a &lt;code&gt;gh-pages&lt;/code&gt; branch with a &lt;code&gt;_config.yml&lt;/code&gt; and
a &lt;code&gt;_layout&lt;/code&gt; directory and popped in a &lt;a href=&quot;https://github.com/thcipriani/linuxtips/blob/gh-pages/Makefile&quot;&gt;Makefile&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CURDIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/index.md

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;INDEX&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:
  @ git show origin/master:README.md &amp;gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;
  @ perl -i -pe &lt;span class=&quot;s1&quot;&gt;&amp;#39;print &amp;quot;---\nlayout: default\ntitle: Linux Tips\n---\n\n&amp;quot; if $$. == 1;&amp;#39;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then I got &lt;a href=&quot;http://www.tylercipriani.com/linuxtips/&quot;&gt;tylercipriani.com/linuxtips&lt;/a&gt;; neat.&lt;/p&gt;

&lt;p&gt;I ran into some problems with that approach along the way. Mostly problems
with git and the separate branches and the order in which I&amp;#8217;d commit and pull
and whatever, it was/is a headache.&lt;/p&gt;

&lt;h2&gt;Pandoc&lt;/h2&gt;

&lt;p&gt;I started thinking about &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt;. Pandoc is this haskell library that makes
miracles of text happen.&lt;/p&gt;

&lt;p&gt;Got an org-mode file and need TeX? Done.&lt;/p&gt;

&lt;p&gt;Got a markdown slideshow that needs to become a beamer slide show? OK, sure.&lt;/p&gt;

&lt;p&gt;Fuck Beamer, how about markdown slides &amp;rarr; Reveal.js slides? You bet your sweet sensual bologna.&lt;/p&gt;

&lt;h2&gt;Imma install Pandoc&amp;#8230;&lt;/h2&gt;

&lt;h3&gt;Debian?&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install haskell-platform
cabal update
cabal install pandoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then add it to your path in your &lt;code&gt;.${SHELL}rc&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.cabal/bin&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.cabal/bin:$PATH&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;OSX?&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew update
brew install pandoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Imma Use Pandoc&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Alright, so I&amp;#8217;ve got tons of markdown files, fairly structured, with bunches of links and I need html5.
I&amp;#8217;ll create a &lt;code&gt;Makefile&lt;/code&gt; proof-of-concept for this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;index.html: README.md
  pandoc -s -f markdown -t html5 -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$&amp;lt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;make&lt;/code&gt; takes my &lt;code&gt;README.md&lt;/code&gt; and makes this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;generator&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pandoc&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width=device-width, initial-scale=1.0, user-scalable=yes&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;lt;script src=&amp;quot;http://html5shim.googlecode.com/svn/trunk/html5.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  &amp;lt;![endif]--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tyler-ciprianis-bookmarks&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Tyler Cipriani&amp;#39;s Bookmarks&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;In an effort to &lt;span class=&quot;nt&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;not&lt;span class=&quot;nt&quot;&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; have 100+ tabs open…&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.flickr.com/photos/tylercipriani/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;My Photography&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Design.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Design&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Development.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Development&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Business.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Business&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fun.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Fun&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Title/Layout/CSS&lt;/h2&gt;

&lt;p&gt;So now that I&amp;#8217;m outputting html, I still need to be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure a layout in which to render html&lt;/li&gt;
&lt;li&gt;Include a css file in said layout&lt;/li&gt;
&lt;li&gt;Add post metadata to my layout (e.g., title, headline, etc.)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Pandoc is able to do all of these things&amp;#8212;easy-peasy-lemon-squeezy.&lt;/p&gt;

&lt;p&gt;First, to establish a layout, let&amp;#8217;s copy the default html5 layout file for Pandoc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pandoc -D html5 &amp;gt; _layout.html5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;ll make some small tweaks to that file, keep the variables I need, ditch the
variables I don&amp;#8217;t need. Here is the html5 layout file I came up with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-UA-Compatible&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;IE=edge&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;$if(title-prefix)$$title-prefix$ - $endif$$pagetitle$&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width=device-width, initial-scale=1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://fonts.googleapis.com/css?family=Open+Sans:800&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
$for(css)$
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$css$&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
$endfor$
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;lt;script src=&amp;quot;http://html5shim.googlecode.com/svn/trunk/html5.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  &amp;lt;![endif]--&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    $body$
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, I need to figure out how to include a css stylesheet.  A quick
search for &lt;code&gt;css&lt;/code&gt; in &lt;code&gt;pandoc(1)&lt;/code&gt; turns up the &lt;code&gt;--css&lt;/code&gt; flag which
enables you to link to a css stylesheet.&lt;/p&gt;

&lt;p&gt;Updated &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;index.html: README.md
  pandoc -s --template &lt;span class=&quot;s2&quot;&gt;&amp;quot;_layout&amp;quot;&lt;/span&gt; --css &lt;span class=&quot;s2&quot;&gt;&amp;quot;css/main.css&amp;quot;&lt;/span&gt; -f markdown -t html5 -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$&amp;lt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I need to be able to include a unique &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag string for
each page. Again, a search through &lt;code&gt;pandoc(1)&lt;/code&gt; for &lt;code&gt;variable&lt;/code&gt; yields results;
using the &lt;code&gt;-V&lt;/code&gt; flag enables you to set template variables using &lt;code&gt;-V [KEY]=[val]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A bit more digging in the online docs, however, nets better solution:
YAML Metadata blocks&amp;#8212;just like jekyll!&lt;/p&gt;

&lt;p&gt;So, for each markdown file in my repo, I&amp;#8217;ll add a block to the top that looks
like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;---
pagetitle: &amp;lt;pagetitle&amp;gt;
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$pagetitle$&lt;/code&gt; is the variable I defined in my &lt;code&gt;_layout.html5&lt;/code&gt; that I&amp;#8217;m
now passing as a template to Pandoc.&lt;/p&gt;

&lt;h2&gt;Makefile fanciness&lt;/h2&gt;

&lt;p&gt;Alright, so now that I have the basics of Pandoc down, I need to whip my
&lt;code&gt;Makefile&lt;/code&gt; into shape.&lt;/p&gt;

&lt;p&gt;First thing is I want to convert ALL of my markdown files to html, not just
the &lt;code&gt;README.md&lt;/code&gt;. So howzabout I add a wildcard target for all the &lt;code&gt;html&lt;/code&gt; files?
Also, the whole point of this is to make a github pages site, so let&amp;#8217;s add
that to the &lt;code&gt;Makefile&lt;/code&gt; too&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;REPO :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell git config --get remote.origin.url&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GHPAGES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; gh-pages

all: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;addprefix &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/, &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;addsuffix .html, &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wildcard *.md&lt;span class=&quot;k&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:
  git clone &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(REPO)&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(GHPAGES)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout --orphan &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git rm -rf .&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/%.html: %.md
  pandoc -s --template &lt;span class=&quot;s2&quot;&gt;&amp;quot;_layout&amp;quot;&lt;/span&gt; -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;css/main.css&amp;quot;&lt;/span&gt; -f markdown -t html5 -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$&amp;lt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;make&lt;/code&gt; at this point should checkout your current git repository to
a subdirectory called &lt;code&gt;gh-pages&lt;/code&gt; (which should be added to &lt;code&gt;.gitignore&lt;/code&gt;
on master).&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;Makefile&lt;/code&gt; first tries to checkout an existing &lt;code&gt;gh-pages&lt;/code&gt; branch,
otherwise it creates a new orphan branch for &lt;code&gt;gh-pages&lt;/code&gt;. After
that, we glob the current directory for any file name &lt;code&gt;*.md&lt;/code&gt; and run it
through pandoc, placing the result in &lt;code&gt;gh-pages/[whatever].html&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Niceities&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m a big fan of pre-processors, so the css/main.css file (which
doesn&amp;#8217;t &lt;em&gt;actually exist&lt;/em&gt; as of yet) should be converted from &lt;code&gt;less&lt;/code&gt;.
The easiest way to do that: add a &lt;code&gt;package.json&lt;/code&gt; with &lt;code&gt;less&lt;/code&gt; as a dependency.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;linkblog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;less&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now running &lt;code&gt;npm install&lt;/code&gt; should create a new &lt;code&gt;node_modules&lt;/code&gt; directory (which
should be added to &lt;code&gt;.gitignore&lt;/code&gt; on master). Now we need to add a &lt;code&gt;lessc&lt;/code&gt;
step to our &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LESSC&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; node_modules/less/bin/lessc
&lt;span class=&quot;nv&quot;&gt;LESSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; less/main.less

&lt;span class=&quot;nv&quot;&gt;CSSDIR&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/css
&lt;span class=&quot;nv&quot;&gt;CSSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/main.css

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSFILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LESSFILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LESSC&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(LESSFILE)&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(CSSFILE)&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:
    mkdir -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(CSSDIR)&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, it&amp;#8217;s always nice to have a &lt;code&gt;clean&lt;/code&gt; target in any &lt;code&gt;Makefile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;clean:
    rm -rf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(GHPAGES)&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;d also like to be able to preview before commiting this file by typing &lt;code&gt;make serve&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;serve:
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, speaking of commiting this file, let&amp;#8217;s make &lt;code&gt;commit&lt;/code&gt; a target, too.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;commit:
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        git add . &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        git commit --edit --message&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Publish @$$(date)&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        git push origin &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now when I update my &lt;code&gt;links&lt;/code&gt; repo&#39;s markdown files I issue a simple series of commands:
&lt;code&gt;make&lt;/code&gt; checks-out my &lt;code&gt;gh-pages&lt;/code&gt; branch and builds the html and css files,
&lt;code&gt;make serve&lt;/code&gt; lets me look at the output html at &lt;code&gt;localhost:8000&lt;/code&gt;,
and, finally, &lt;code&gt;make commit&lt;/code&gt; pushes those changes live.&lt;/p&gt;

&lt;p&gt;So here&amp;#8217;s the &lt;a href=&quot;http://www.tylercipriani.com/links&quot;&gt;result&lt;/a&gt; and the final &lt;code&gt;Makefile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;REPO :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell git config --get remote.origin.url&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GHPAGES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; gh-pages

&lt;span class=&quot;nv&quot;&gt;LESSC&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; node_modules/less/bin/lessc
&lt;span class=&quot;nv&quot;&gt;LESSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; less/main.less

&lt;span class=&quot;nv&quot;&gt;CSSDIR&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/css
&lt;span class=&quot;nv&quot;&gt;CSSFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/main.css

all: init clean &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSFILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;addprefix &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/, &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;addsuffix .html, &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wildcard *.md&lt;span class=&quot;k&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/%.html: %.md
    pandoc -s --template &lt;span class=&quot;s2&quot;&gt;&amp;quot;_layout&amp;quot;&lt;/span&gt; -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;css/main.css&amp;quot;&lt;/span&gt; -f markdown -t html5 -o &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$&amp;lt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSFILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LESSFILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LESSC&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(LESSFILE)&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(CSSFILE)&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CSSDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:
    mkdir -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(CSSDIR)&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:
    @echo &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;REPO&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    git clone &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(REPO)&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(GHPAGES)&amp;quot;&lt;/span&gt;
    @echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;Donezo&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout --orphan &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git rm -rf .&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

init:
    @command -v pandoc &amp;gt; /dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pandoc not found http://johnmacfarlane.net/pandoc/installing.html&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    @&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -x &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LESSC&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; npm install

serve:
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer

clean:
    rm -rf &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

commit:
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        git add . &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        git commit --edit --message&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Publish @$$(date)&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        git push origin &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;GHPAGES&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

.PHONY: init clean commit serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 13 May 2014 00:00:00 -0600</pubDate>
        <link>http://www.tylercipriani.com/2014/05/13/replace-jekyll-with-pandoc-makefile.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2014/05/13/replace-jekyll-with-pandoc-makefile.html</guid>
      </item>
    
      <item>
        <title>Knowledge Nuggets From My Tmux.conf</title>
        <description>&lt;p&gt;When I switched from GNU Screen to Tmux, I was just jazzed that Tmux &lt;em&gt;had&lt;/em&gt; a
status bar. To achieve that same effect in Screen I had a cryptic
115-character &lt;code&gt;hardstatus&lt;/code&gt; string that I copy&amp;#8211;pasted from someplace
lost to the annals of the Internet Archive.&lt;/p&gt;

&lt;p&gt;It wasn&amp;#8217;t too long after I made the switch until I felt that old
hacker itch and began scouring Github for Tmux tips.&lt;/p&gt;

&lt;p&gt;You can view my complete &lt;code&gt;tmux.conf&lt;/code&gt; on &lt;a href=&quot;https://github.com/thcipriani/dotfiles/blob/master/tmux.conf&quot;&gt;my github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Tmux Tips for the Uninitiated&lt;/h2&gt;

&lt;p&gt;&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;Ctrl&lt;/code&gt;-&lt;code&gt;f&lt;/code&gt; Meta is for super stars&lt;/p&gt;

&lt;p&gt;I used to always bind &lt;code&gt;Ctrl&lt;/code&gt;-&lt;code&gt;a&lt;/code&gt; to Meta to make Tmux behave like Screen;
however, when you use Screen inside Tmux (as I often do with our AWS servers),
hitting &lt;code&gt;Ctrl&lt;/code&gt;-&lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; can get pretty tiresome. Plus, you can&amp;#8217;t use
Readline very effectively without &lt;code&gt;Ctrl&lt;/code&gt;-&lt;code&gt;a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;unbind-key C-b &lt;span class=&quot;c&quot;&gt;#no more Ctrl-b&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Switch me to ^f, thanks&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-option -g prefix C-f
&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;-key f send-prefix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;
Faster escape&lt;/p&gt;

&lt;p&gt;When I first started using Tmux I couldn&amp;#8217;t stand the amount of time it
took to enter copy-mode. Then I realized&amp;#8212;I didn&amp;#8217;t have to.&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-option -sg escape-time 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;
Maximize Panes&lt;/p&gt;

&lt;p&gt;One of the things I love about Vim splits is that you can hit &lt;code&gt;Ctrl-w&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; to
maximize the current  pane and hit &lt;code&gt;Ctrl-w&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; to bring it back to an even
split. Bringing that functionality to Tmux is very powerful and super easy.
This line will let you hit &lt;code&gt;Meta&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; to maximize a single pane and then hit
&lt;code&gt;Meta&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; again to bring it back to the original split.&lt;/p&gt;

&lt;p&gt;Warning: this is a tip that will only work with tmux 1.8+ (check your version via &lt;code&gt;tmux -V&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;-key &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; resize-pane -Z &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; display-message &lt;span class=&quot;s2&quot;&gt;&amp;quot;Zoom zoom zoom&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;
Vim-esque system clipboard copy&amp;#8211;paste&lt;/p&gt;

&lt;p&gt;Sometimes system clipboard support from Vim isn&amp;#8217;t enough. It&amp;#8217;s
convenient to be able to pull whatever is in your Tmux buffer onto your
system clipboard (preferably without having to memorize any new keybindings
and without overwriting any existing keybindings).&lt;/p&gt;

&lt;p&gt;First, I set the window mode-keys to use Vi bindings:&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-window-option -g mode-keys vi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Next, I bind &lt;code&gt;Meta Esc&lt;/code&gt; to enter Tmux copy-mode:&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;unbind-key &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;-key Escape copy-mode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;After that, I bind visual-selection and copy keys inside vi-copy mode to
their Vim equivalents:&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;-key -t vi-copy &lt;span class=&quot;s1&quot;&gt;&amp;#39;v&amp;#39;&lt;/span&gt; begin-selection
&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;-key -t vi-copy &lt;span class=&quot;s1&quot;&gt;&amp;#39;y&amp;#39;&lt;/span&gt; copy-selection&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Finally, I bind &lt;code&gt;Meta y&lt;/code&gt; to execute a shell command. This should work on either
Linux or OSX, although I&amp;#8217;ve only tested this on OSX:&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;-shell &lt;span class=&quot;s1&quot;&gt;&amp;#39;test &amp;quot;$(uname -s)&amp;quot; = &amp;quot;Darwin&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bind-key y run-shell &amp;quot;tmux show-buffer | pbcopy&amp;quot; \; display-message &amp;quot;Copied tmux buffer to system clipboard&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;-shell &lt;span class=&quot;s1&quot;&gt;&amp;#39;test &amp;quot;$(uname -s)&amp;quot; = &amp;quot;Linux&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bind-key y run-shell &amp;quot;tmux show-buffer | xclip -sel clip -i&amp;quot; \; display-message &amp;quot;Copied tmux buffer to system clipboard&amp;quot;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;
OSX Specific Tmux file&lt;/p&gt;

&lt;p&gt;Even though Tmux and Vim are really popular on OSX&amp;#8212;they are, essentially,
broken. You have to do the whole &lt;code&gt;reattach-to-user-namespace&lt;/code&gt; thing to get
Vim&amp;#8217;s clipboard to play nicely inside Tmux. This mess makes your
&lt;code&gt;tmux.conf&lt;/code&gt; look more cluttered and makes your dotfiles a little less portable.
To fix this I keep an OSX Specific &lt;code&gt;tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#dumb osx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;-shell &lt;span class=&quot;s1&quot;&gt;&amp;#39;test &amp;quot;$(uname)&amp;quot; = &amp;quot;Darwin&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;source ~/.tmux-osx.conf&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;
Steve Losh&amp;#8217;s Bad Wolf Status Bar&lt;/p&gt;

&lt;p&gt;News Flash: Steve Losh makes cool looking stuff. In Steve&amp;#8217;s version
of this he uses a small script to get his unread email count from his local
offlineimap folder. In the version below I use a little bash script I wrote
to grab weather info (that I call weathermajig).&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Bad Wolf by Steve Losh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =====================&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g status-fg white
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g status-bg colour234
&lt;span class=&quot;c&quot;&gt;# set -g status-bg default #set for transparent background&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g window-status-activity-attr bold
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g pane-border-fg colour245
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g pane-active-border-fg colour39
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g message-fg colour16
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g message-bg colour221
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g message-attr bold
&lt;span class=&quot;c&quot;&gt;# Custom status bar&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Powerline&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g status-left-length 32
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g status-right-length 150
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g status-interval 5
&lt;span class=&quot;c&quot;&gt;# Lets add the current weather to our status bar—why? Well Why the french-toast not?&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g status-left &lt;span class=&quot;s1&quot;&gt;&amp;#39;#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour238,nobold]#[fg=colour15,bg=colour238,bold] #(weathermajig boulder --short) #[fg=colour238,bg=colour234,nobold]&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g status-right &lt;span class=&quot;s1&quot;&gt;&amp;#39;#[fg=colour245]❬ %R ❬ %d %b #[fg=colour254,bg=colour234,nobold]#(rdio-current-track-tmux)#[fg=colour16,bg=colour254,bold] #h &amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g window-status-format &lt;span class=&quot;s2&quot;&gt;&amp;quot;#[fg=white,bg=colour234] #I #W &amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -g window-status-current-format &lt;span class=&quot;s2&quot;&gt;&amp;quot;#[fg=colour234,bg=colour39]#[fg=colour16,bg=colour39,noreverse,bold] #I ❭ #W #[fg=colour39,bg=colour234,nobold]&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/li&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Sep 2013 00:00:00 -0600</pubDate>
        <link>http://www.tylercipriani.com/2013/09/12/important-lines-in-my-tmux.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2013/09/12/important-lines-in-my-tmux.html</guid>
      </item>
    
      <item>
        <title>Dotfile Boilerplate</title>
        <description>&lt;p&gt;Earlier today I made a tweak to one of my ever-growing collection of
&lt;a href=&quot;https://github.com/thcipriani/dotfiles/&quot;&gt;dotfiles&lt;/a&gt; and it reminded me
that I&amp;#8217;m not too happy with my dotfile&amp;#8217;s &lt;code&gt;bootstrap&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bootstrap&lt;/code&gt; file that I have in my repo is from &lt;a href=&quot;http://errtheblog.com/posts/89-huba-huba&quot;&gt;a 2008 blog post&lt;/a&gt;
and I&amp;#8217;ve never been too thrilled with it.&lt;/p&gt;

&lt;p&gt;The problems my old &lt;code&gt;boostrap&lt;/code&gt; were&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It required that Ruby be installed&amp;#8212;which was a pain on production
servers where I never intended to have Ruby installed.&lt;/li&gt;
&lt;li&gt;It overwrote any existing dotfiles in &lt;code&gt;$HOME&lt;/code&gt; without warning&lt;/li&gt;
&lt;li&gt;It added every sub-directory/file in the .dotfiles directory&amp;#8212;you couldn&amp;#8217;t
add a README.md file without it being symlinked in the &lt;code&gt;$HOME&lt;/code&gt; directory as
&lt;code&gt;.README.md&lt;/code&gt;&amp;#8212;silly, right?!&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Long story short&amp;#8212;I needed a new &lt;code&gt;bootstrap&lt;/code&gt; file. I&amp;#8217;m a big
believer in not reinventing the wheel, so I went looking for the canonical
example of the dotfile bootstrap file.&lt;/p&gt;

&lt;p&gt;I started perusing dotfile repos on github&amp;#8212;which is always exciting
to me (because I&amp;#8217;m super nerdy) and there are some amazing dotfile resources
on github:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dotfiles.github.io/&quot;&gt;Github &amp;#10084; ~/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mathiasbynens/dotfiles&quot;&gt;Mathias Bynens&amp;#8217; Sensible Hacker Defaults for OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gf3/dotfiles&quot;&gt;gf3&amp;#8217;s Sexy Bash Prompt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/&quot;&gt;Zach Holman&amp;#8217;s Bootstrap script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/addyosmani/dotfiles/blob/master/.aliases&quot;&gt;Addy Osmani&amp;#8217;s Handy Aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pengwynn/dotfiles&quot;&gt;pengwynn&amp;#8217;s There&amp;#8217;s no place like ~/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Seeing all of this got me to thinking&amp;#8212;wouldn&amp;#8217;t it be great if there
were a project that amalgamated all of this fun stuff? Like HTML5 Boilerplate
for dotfiles.&lt;/p&gt;

&lt;p&gt;The project will keep canonical examples of files like the &lt;code&gt;bootstrap&lt;/code&gt; script.
It would also keep an opinionated list of functions, aliases and
configurations that could help beginners get a great start and normalize
dotfile distribution in the same way that pathogen normalized vim plugins
into bundles.&lt;/p&gt;

&lt;h2&gt;Dotfile Boilerplate&lt;/h2&gt;

&lt;p&gt;So there&amp;#8217;s the starting point: &lt;a href=&quot;https://github.com/thcipriani/dotfile-boilerplate&quot;&gt;Dotfile Boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the very least it&amp;#8217;s a solidly structured start with an amazing
bootstrap script that I modfied based off of Zach Holman&amp;#8217;s setup.&lt;/p&gt;

&lt;p&gt;So that&amp;#8217;s the whole idea&amp;#8212;the hope is that this repository can grow
and collect great ideas, functions, and well-considered dotfiles from
interesting discussions and people around the internet.&lt;/p&gt;

&lt;p&gt;Beginners will have an amazing starting point and advanced users will have
a wellspring of ideas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/using-pull-requests/&quot;&gt;Fork &amp;#8216;em if ya got &amp;#8216;em.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Aug 2013 00:00:00 -0600</pubDate>
        <link>http://www.tylercipriani.com/2013/08/10/dotfiles-how-to-get-started.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2013/08/10/dotfiles-how-to-get-started.html</guid>
      </item>
    
      <item>
        <title>Installing Vim from source on CentOS&amp;nbsp;6.3</title>
        <description>&lt;p&gt;…or, I suppose, other Linux-es…Linuxi…Linux distributions.&lt;/p&gt;

&lt;p&gt;Many of the Vim features on which I&amp;#8217;ve come to depend simply aren&#39;t available in Vim pre-7.3.3. That&amp;#8217;s fine if I&amp;#8217;m working on an OS that cares about having up-to-date software like Ubuntu or OSX; however, it ain&amp;#8217;t so great if I&amp;#8217;m working on a shared host that uses CentOS &lt;strong&gt;&lt;em&gt;five point something dumb&lt;/em&gt;&lt;/strong&gt; because the hosting-providers weren&amp;#8217;t hugged as children (I&amp;#8217;d guess).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;&amp;#8212;10/01/2013&lt;/p&gt;

&lt;p&gt;For installing on Ubuntu and additional source install tips see this little
&lt;a href=&quot;https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source&quot;&gt;post&lt;/a&gt;
on the YouCompleteMe wiki&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;New OS, Old Repo&lt;/h2&gt;

&lt;p&gt;The only thing worse than working on an old OS, with an old version of Vim is working on a &lt;em&gt;new&lt;/em&gt; OS with an old version of Vim. I recently disovered that the yum-installable Vim (vim-enhanced) version on CentOS 6.3 is v.7.2.411—WTF CentOS? What&amp;#8217;s your deal, guy?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some plugins that depend on version 7.3:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;shy;&lt;a href=&quot;http://majutsushi.github.com/tagbar/&quot; target=&quot;_blank&quot;&gt;Tagbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;shy;&lt;a href=&quot;http://myusuf3.github.com/numbers.vim/&quot; target=&quot;_blank&quot;&gt;Numbers.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;shy;&lt;a href=&quot;http://valloric.github.com/YouCompleteMe/&quot; target=&quot;_blank&quot;&gt;YouCompleteMe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And, really, those are just the plugins that fail &lt;em&gt;loudly&lt;/em&gt; for me. Like the ones that vomit, &amp;#8220;Hey, WTF, guy?&amp;#8221; to stdout every rootin&amp;#8217; tootin&amp;#8217; time I fire up Vim. There would likely be other functionality that I&amp;#8217;d loose by not using Vim 7.3.3+.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t have to take this kind of guff from CentOS. No. I think that, instead, I&amp;#8217;m going to do something awesome.&lt;/p&gt;

&lt;p&gt;Compiling Vim from source means you don&amp;#8217;t have to get pushed around by crummy distro repos and you look like a 1970s-era Fred Williams-level badass…so…bonus points…&lt;/p&gt;

&lt;h2&gt;Retrieving Vim source&lt;/h2&gt;

&lt;p&gt;Vim keeps its source in a Mercurial repo on googlcode so you need to download it. To do that you should have Mercurial installed (which you can, somewhat ironically, install from via yum &lt;code&gt;yum install mercurial&lt;/code&gt;). You should switch to the root user for this install and for your sanity so use &lt;code&gt;su&lt;/code&gt; or &lt;code&gt;sudo bash&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo bash
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/src/
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hg clone https://vim.googlecode.com/hg/ vim
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configuration options&lt;/h2&gt;

&lt;p&gt;There are quite a few configuration options (which you can view by running &lt;code&gt;./configure --help&lt;/code&gt; in your newly created &lt;code&gt;vim&lt;/code&gt; directory)—with respect to Vim installs I support going nuclear. Even at it&amp;#8217;s most ginormous Vim will still be a small install relative to other IDEs—Vim is my primary editor and IDE, so I&amp;#8217;m down to do it big. I&amp;#8217;m also going to use the &lt;code&gt;/usr&lt;/code&gt; prefix so that Vim is installed system-wide.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr --with-compiledby&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Tyler the Compiler&amp;quot;&lt;/span&gt; --with-features&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;huge --enable-rubyinterp --enable-pythoninterp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;make &amp;amp;&amp;amp; make install&lt;/h2&gt;

&lt;p&gt;Srsly, that&amp;#8217;s it&amp;#8212;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congrats! You&amp;#8217;re one bad mother Vim compiler.&lt;/p&gt;

&lt;p&gt;So… &lt;code&gt;which vim&lt;/code&gt;? &lt;code&gt;/usr/bin/vim&lt;/code&gt;. Boom. Yeah, that&amp;#8217;s right.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Feb 2013 00:00:00 -0700</pubDate>
        <link>http://www.tylercipriani.com/2013/02/24/install-vim-from-source.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2013/02/24/install-vim-from-source.html</guid>
      </item>
    
      <item>
        <title>Vim, the OSX clipboard and Tmux</title>
        <description>&lt;p&gt;I&amp;#8217;ve been an Ubuntu user for 4 years now. Since I started working at Upsync 3 months ago, I&amp;#8217;ve found myself a very lonely desktop Linux user. Also, since this job is my first heavy-duty exposure to back-end web development, I&amp;#8217;ve found myself a very confused desktop Linux user.&lt;/p&gt;

&lt;p&gt;While there are many tools for working on a website backend available in Ubuntu, few are as shiny as those available in OSX (Charles Proxy, usable in Chrome. I want that. I want it hard.). Also, want to do any iOS work? (you know I do)&amp;mdash;then you &lt;em&gt;must&lt;/em&gt; have a mac.&lt;/p&gt;

&lt;p&gt;On the flip side there is my natural inclination to be a bit of a contrarian and principles and such&amp;#8230;&lt;/p&gt;

&lt;h2&gt;&amp;#8230;but it&amp;#8217;s so shiny!&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve caved. I&amp;#8217;m a sell-out. I&amp;#8217;m not the cool hardcore ideologue I once believed myself to be. You know those hypothetical, &lt;em&gt;which-side-of-history-would-you-be-on-type&lt;/em&gt;, questions? Well, I can now safely say that I would &lt;em&gt;not&lt;/em&gt; have been in the French Resistance.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m typing this on the beautiful back-lit keyboard of a brand-new, core-i7-having, 8GB-RAM-possesing, 256GB-SSD-not-spinning monster that is a 13&amp;#8243; MacBook Air.&lt;/p&gt;

&lt;h2&gt;I thought this was supposed to be easy&lt;/h2&gt;

&lt;p&gt;The first thing I did was get iTerm 2 up and running and then install Homebrew. After removing the dumb &amp;#8220;Natural&amp;#8221; scrolling and using PCKeyboard hack to remap some keys, I&amp;#8217;m working exactly as I was before. I really can&amp;#8217;t tell a difference. Which is a little anti-climactic for a computer that cost as much as my first car (oh, how I miss that purple Taurus!).&lt;/p&gt;

&lt;p&gt;It was really easy to get everything set up as it was before, except&amp;#8230;Vim&amp;#8230;my clipboard&amp;#8230;Tmux&amp;#8230;they didn&amp;#8217;t work together and that was CRIPPLING! Seriously, I depend on those things working together.&lt;/p&gt;

&lt;p&gt;This post is written as a little reminder to myself of how I got it all up and running again.&lt;/p&gt;

&lt;h2&gt;The process&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install Homebrew:&lt;/strong&gt;&lt;br /&gt;Instructions are available on &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot; target=&quot;_blank&quot; title=&quot;Homebrew&quot;&gt;Github&lt;/a&gt; but really all it boils down to is: &lt;code&gt;ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install MacVim:&lt;/strong&gt;&lt;br /&gt;And make sure it overrides the system default Vim, which is pre-7.3 Vim and sucks (or it was last week when my MacBook got here) use: &lt;code&gt;brew install macvim --override-system-vim&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install Tmux:&lt;/strong&gt;&lt;br /&gt;Easy peesy lemon squeezy: &lt;code&gt;brew install tmux&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Thank the good, sweet lord for Paul Hinze:&lt;/strong&gt;&lt;br /&gt; Install Paul&amp;#8217;s reattach-to-user-namespace hack via homebrew: &lt;code&gt;brew install reattach-to-user-namespace --wrap-pbcopy-and-pbpaste&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Append your &lt;code&gt;~/.tmux.conf&lt;/code&gt; file&lt;/strong&gt;:&lt;br /&gt;With this lovely gem: &lt;code&gt;set-option -g default-command &quot;reattach-to-user-namespace -l zsh&quot;&lt;/code&gt; or you can use bash, I guess, I don&amp;#8217;t know because I use ZSH. That should be a step somewhere&amp;#8230;&lt;code&gt;chsh -s /bin/zsh&lt;/code&gt;. Done.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Now if only OSX Mountain Lion possessed the awesome power of moving windows between workspaces using keyboard shortcuts. Someday&amp;#8230; someday.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Feb 2013 00:00:00 -0700</pubDate>
        <link>http://www.tylercipriani.com/2013/02/09/vim-mac-osx-tmux-clipboard.html</link>
        <guid isPermaLink="true">http://www.tylercipriani.com/2013/02/09/vim-mac-osx-tmux-clipboard.html</guid>
      </item>
    
  </channel>
</rss>